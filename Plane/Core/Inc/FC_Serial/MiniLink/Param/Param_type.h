/*
 * =================================================================================
 * AUTO-GENERATED FILE. DO NOT EDIT.
 * =================================================================================
 *
 * This file was automatically generated by the param_to_c_converter.py script.
 * Any changes made to this file will be overwritten on the next run.
 *
 * Source XML Version: 0.1
 * Converter Version: 0.1.0
 *
 */

 
#ifndef PARAM_TYPE_H_
#define PARAM_TYPE_H_


#define _MINILINK_PARAM_XML_VERSION    (0.1)

#include <stdint.h> // For uint8_t, uint16_t, etc.

typedef struct __attribute__((packed)) {
    // 파라미터 관리를 위한 메타데이터 헤더
    struct __attribute__((packed)) {
        uint8_t version;
        uint8_t subVersion;
        uint16_t length;
    } header;
    struct __attribute__((packed)) {
        // ICM-42688-P 설정 값
        struct __attribute__((packed)) {
            struct __attribute__((packed)) {
                float sensitivity;
                struct __attribute__((packed)) {
                    int16_t roll;
                    int16_t pitch;
                    int16_t yaw;
                } offset;
            } acc;
            struct __attribute__((packed)) {
                float sensitivity;
                struct __attribute__((packed)) {
                    int16_t roll;
                    int16_t pitch;
                    int16_t yaw;
                } offset;
            } gyro;
        } imu0;
    } ins;
    struct __attribute__((packed)) {
        float OVERRIDE_TIME;
        uint16_t OPTIONS;
        uint16_t PROTOCOLS;
        float FS_TIMEOUT;
        uint16_t reversedMask;
        struct __attribute__((packed)) {
            uint16_t MIN;
            uint16_t MAX;
            uint16_t TRIM;
            uint8_t DZ;
            uint16_t OPTION;
        } channel[16];
        struct __attribute__((packed)) {
            uint8_t THR;
            uint8_t ROL;
            uint8_t PIT;
            uint8_t YAW;
        } map;
    } rc;
    struct __attribute__((packed)) {
        uint16_t baud;
        uint8_t protocol;
        uint16_t options;
    } serial[4];
    struct __attribute__((packed)) {
        uint8_t AUTO_TRIM : 1;
        uint16_t RATE;
        uint8_t DSHOT_RATE : 3;
        uint8_t DSHOT_ESC : 3;
        uint32_t GPIO_MASK;
        uint16_t RC_FS_MSK;
        uint8_t _32_ENABLE : 1;
        struct __attribute__((packed)) {
            uint16_t MIN;
            uint16_t MAX;
            uint16_t TRIM;
            uint8_t REVERSED : 1;
            int16_t FUNCTION;
        } channel[12];
    } servo;
    struct __attribute__((packed)) {
        struct __attribute__((packed)) {
            float roll;
            float pitch;
            float yaw;
        } ANGLE;
        struct __attribute__((packed)) {
            float roll;
            float pitch;
            float yaw;
        } RATE;
    } pid;
} PARAM;

#endif // PARAM_TYPE_H_
